// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package example

import "time"

// ETCD should use NewETCD to initialize it
type ETCD struct {
	// annotation@Endpoints(comment="etcd地址")
	Endpoints []string `usage:"etcd地址"`
	// annotation@TimeoutsPointer(comment="timeout设置")
	TimeoutsPointer *Timeouts `usage:"timeout设置"`
	// annotation@Redis(getter="RedisVisitor")
	Redis *Redis
	// annotation@writeTimeout(private="true",arg=1)
	writeTimeout time.Duration
}

// NewETCD new ETCD
func NewETCD(writeTimeout time.Duration, opts ...ETCDOption) *ETCD {
	cc := newDefaultETCD()
	cc.writeTimeout = writeTimeout
	for _, opt := range opts {
		opt.Apply(cc)
	}
	if watchDogETCD != nil {
		watchDogETCD(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *ETCD) ApplyOption(opts ...ETCDOption) {
	for _, opt := range opts {
		opt.Apply(cc)
	}
}

// ETCDOptionFunc option func
type ETCDOption interface {
	Apply(cc *ETCD)
}

var _ ETCDOption = ETCDOptionFunc(nil)

type ETCDOptionFunc func(cc *ETCD)

func (f ETCDOptionFunc) Apply(cc *ETCD) {
	f(cc)
}

// WithETCDEndpoints etcd地址
func WithETCDEndpoints(v ...string) ETCDOptionFunc {
	return func(cc *ETCD) {
		cc.Endpoints = v
	}
}

// AppendETCDEndpoints etcd地址
func AppendETCDEndpoints(v ...string) ETCDOptionFunc {
	return func(cc *ETCD) {
		cc.Endpoints = append(cc.Endpoints, v...)
	}
}

// WithETCDTimeoutsPointer timeout设置
func WithETCDTimeoutsPointer(v *Timeouts) ETCDOptionFunc {
	return func(cc *ETCD) {
		cc.TimeoutsPointer = v
	}
}

// WithETCDRedis option func for filed Redis
func WithETCDRedis(v *Redis) ETCDOptionFunc {
	return func(cc *ETCD) {
		cc.Redis = v
	}
}

// InstallETCDWatchDog the installed func will called when NewETCD  called
func InstallETCDWatchDog(dog func(cc *ETCD)) { watchDogETCD = dog }

// watchDogETCD global watch dog
var watchDogETCD func(cc *ETCD)

// setETCDDefaultValue default ETCD value
func setETCDDefaultValue(cc *ETCD) {
	cc.writeTimeout = time.Second
	for _, opt := range [...]ETCDOptionFunc{
		WithETCDEndpoints([]string{"10.0.0.1", "10.0.0.2"}...),
		WithETCDTimeoutsPointer(&Timeouts{}),
		WithETCDRedis(NewRedis()),
	} {
		opt(cc)
	}
}

// newDefaultETCD new default ETCD
func newDefaultETCD() *ETCD {
	cc := &ETCD{}
	setETCDDefaultValue(cc)
	return cc
}

// all getter func
func (cc *ETCD) GetEndpoints() []string         { return cc.Endpoints }
func (cc *ETCD) GetTimeoutsPointer() *Timeouts  { return cc.TimeoutsPointer }
func (cc *ETCD) GetRedis() RedisVisitor         { return cc.Redis }
func (cc *ETCD) GetWriteTimeout() time.Duration { return cc.writeTimeout }

// ETCDVisitor visitor interface for ETCD
type ETCDVisitor interface {
	GetEndpoints() []string
	GetTimeoutsPointer() *Timeouts
	GetRedis() RedisVisitor
	GetWriteTimeout() time.Duration
}

// ETCDInterface visitor + ApplyOption interface for ETCD
type ETCDInterface interface {
	ETCDVisitor
	ApplyOption(...ETCDOption)
}
